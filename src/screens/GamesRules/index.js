import React, {useState, useEffect, useRef} from 'react';
import {
  Image,
  SafeAreaView,
  View,
  StyleSheet,
  Dimensions,
  Alert,
  FlatList,
  Text,
  ScrollView,
  ImageBackground,
  ActivityIndicator,
} from 'react-native';
import {useSelector, useDispatch} from 'react-redux';
import Header from '../../Components/Header';
import {
  LifeCard,
  LifeCardRefferAndVideo,
  TopTab,
  WjBackground,
} from '../../Components';
import styles from './styles';
import LinearGradient from 'react-native-linear-gradient';
const {width, height} = Dimensions.get('window');

const index = ({route, navigation}) => {
  const [headerValue, setHeaderValue] = useState(0);
  const [selected, setSelected] = useState(0);
  const data = [
    'The live show will start at 8 PM UAE timing.',
    'No new users can join after the show starts.',
    'Lives can only be used up until question.',
    'At WinJoy, if we suspect you of cheating or fraud, we reserve the right to disqualify you and you will not receive a prize.',
    'The decisions made by the WinJoy technical team are final and can not be appealed.',
    'Prizes are reserved for contestants from the GCC countries only.',
    'The withdrawal requests will be approved 2 times a month, 15th and 30th of the month.',
    'Contestants can only withdraw a maximum amount of 250 DHS.',
    'If there are 2 or more winners in the same live game show, the prize will be distributed equally among the winners.',
    'There is an age restriction on the game show whereby only individuals who are 18+ are allowed to join and play.',
    'Winjoy reserves the right to verify an entrant’s eligibility before, during, or after the contest.',
    'To be eligible to receive a prize, the information associated with the entrant’s account must be true and accurate. The information associated with the entrant’s account must identify the actual entrant into the game show.',
    'In order to facilitate the delivery of a prize, WinJoy may attempt to contact the winner using the phone number provided during account registration. If Winjoy cannot get in contact with the winner using that phone number, the winner may forfeit his/her prize.',
    'WinJoy reserves the right to cancel the game show, in our sole discretion, with no restrictions.',
    'The winner of each game show, upon completion of all verifications and obligation requirements, will receive a cash prize, determined in Winjoy’s sole discretion.',
    'Each user may establish, maintain, use and control only one account. Each account may only be owned, maintained, used, and controlled by one individual.',
    'Winjoy reserves the right to disqualify any entries that it believes in good faith are generated by an automated means or scripts or that violate any of these game rules or the terms of use. Entries generated by script, macro or other automated means are void.',
    'The game show will be conducted under the sponsor’s supervision. The decisions of the sponsor are final and binding in all matters relating to the game.',
    "By entering the game show or accepting a prize, you agree to conform to UAE's Federal and local (Dubai’s) laws and regulations.",
  ];
  const onPressFirst = () => {
    setSelected(0);
  };
  const onPressSecond = () => {
    setSelected(1);
  };

  return (
    <SafeAreaView style={styles.safeStyle}>
      <LinearGradient
        start={{x: 0, y: 0}}
        end={{x: 1, y: 0}}
        colors={['#f8d7e8', '#c7dfe8']}
        style={{flex: 1}}>
        <Header
          style={{
            position: 'absolute',
            zIndex: 1000,
            backgroundColor: headerValue !== 0 ? 'rgba(0,0,0,0.5)' : null,
            width: '100%',
            borderBottomRightRadius: 10,
            borderBottomLeftRadius: 10,
          }}
        />
        <ScrollView
          onScroll={e => {
            setHeaderValue(e.nativeEvent.contentOffset.y);
          }}>
          <LinearGradient
            start={{x: 0, y: 0}}
            end={{x: 1, y: 0}}
            colors={['#420E92', '#E7003F']}
            style={{
              height: 'auto',
              borderBottomRightRadius: 20,
              borderBottomLeftRadius: 20,
            }}>
            <View
              style={{marginVertical: 10, alignItems: 'center', marginTop: 50}}>
              <Text style={[styles.headerText]}>Games Rules</Text>
            </View>
          </LinearGradient>

          <View
            style={{
              width: '100%',
              alignItems: 'center',
              flex: 1,
              padding: 10,
            }}>
            <View
              style={{
                backgroundColor: '#ffffff',
                width: '100%',
                padding: 15,
                borderRadius: 10,
              }}>
              {data.map((item, index) => {
                return (
                  <Text key={index} style={styles.paragraph}>
                    {item}
                  </Text>
                );
              })}
            </View>
          </View>
        </ScrollView>
      </LinearGradient>
    </SafeAreaView>
  );
};
export default index;
